version: '3.8'
services:

  #
  # The web host simply serves static content
  #
  webhost:
    image: webhost:1.0.0
    hostname: webhost
    ports:
      - 3003:3000
    volumes:
      - ./webhost/config.json:/usr/webhost/config.json
      - ./spa/config.json:/usr/webhost/content/config.json
    environment:
      NODE_ENV: 'production'

  #
  # Deploy the example business API, which is a simple API that just validates JWTs
  # It runs on port 3002 inside the cluster at http://api-internal.example.com:3002
  # The SPA accesses it via the reverse proxy at http://api.example.com:3000/api
  #
  business-api:
    image: business-api:1.0.0
    hostname: api-internal.example.com
    volumes:
      - ./api/config.json:/usr/api/config.json

  #
  # The Token Handler API (OAuth Agent) provided by Curity is hosted here, to perform the OAuth work
  # It runs on port 3001 inside the cluster at http://tokenhandler-internal.example.com:3001
  # The SPA accesses it via the reverse proxy at http://api.example.com:3000/tokenhandler
  #
  token-handler-api:
    image: token-handler-standard:1.0.0
    hostname: tokenhandler-internal.example.com
    volumes:
      - ./token-handler-api/dist/config.js:/usr/bff-api/dist/config.js
    environment:
      PORT: 3001
      TRUSTED_WEB_ORIGIN: 'http://www.example.com'
      AUTHORIZE_ENDPOINT: 'http://login.example.com/oauth/v2/oauth-authorize'
      TOKEN_ENDPOINT: 'http://login-internal.example.com:8443/oauth/v2/oauth-token'
      LOGOUT_ENDPOINT: 'http://login.example.com/oauth/v2/oauth-session/logout'
      CLIENT_ID: 'spa-client'
      REDIRECT_URI: 'http://www.example.com/'
      POST_LOGOUT_REDIRECT_URI: 'http://www.example.com/'
      SCOPE: 'openid profile'
      COOKIE_DOMAIN: 'api.example.com'
      COOKIE_NAME_PREFIX: 'example'
      COOKIE_ENCRYPTION_KEY: 'NF65meV>Ls#8GP>;!Cnov)rIPRoK^.NP'

  #
  # The Kong reverse proxy exposes API endpoints to the browser at http://api.example.com:3000
  #
  reverse-proxy:
    image: kong:2.5.0-alpine
    hostname: reverseproxy
    ports:
      - 3000:3000
    volumes:
      - ./reverse-proxy/kong.yml:/usr/local/kong/declarative/kong.yml
      - ./kong-phantom-token-plugin/plugin:/usr/local/share/lua/5.1/kong/plugins/phantom-token
      - ./oauth-proxy-plugin/plugin/oauth-proxy.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/access.lua
      - ./oauth-proxy-plugin/plugin/kong/handler.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/handler.lua
      - ./oauth-proxy-plugin/plugin/kong/schema.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/schema.lua
      - ./oauth-proxy-plugin/plugin/kong/oauth-proxy-1.0.0-1.rockspec:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/oauth-proxy-1.0.0-1.rockspec
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: '/usr/local/kong/declarative/kong.yml'
      KONG_PROXY_LISTEN: '0.0.0.0:3000'
      KONG_LOG_LEVEL: 'info'
      KONG_PLUGINS: 'bundled,oauth-proxy,phantom-token'

  #
  # A SQL database used by the Curity Identity Server
  #
  curity-data:
    image: postgres:13.2
    hostname: dbserver
    volumes:
      - ./idsvr/data-backup.sql:/docker-entrypoint-initdb.d/data-backup.sql
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'Password1'
      POSTGRES_DB: 'idsvr'

  #
  # A standalone instance of the Curity Identity Server
  #
  curity-idsvr:
    image: curity.azurecr.io/curity/idsvr:6.5.0
    hostname: login-internal.example.com
    ports:
     - 6749:6749
    volumes:
     - ./idsvr/license.json:/opt/idsvr/etc/init/license/license.json
     - ./idsvr/config-backup.xml:/opt/idsvr/etc/init/config.xml
     - ./idsvr/log4j2.xml:/opt/idsvr/etc/log4j2.xml
    environment:
      PASSWORD: 'Password1'

  openresty:
    image: openresty/openresty:1.19.9.1-bionic
    hostname: openrestyserver
    ports:
      - 80:80
    volumes:
      - ../../nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ../../nginx/conf.d:/usr/local/openresty/nginx/conf/conf.d
